#!/usr/bin/python

import os
import sys
import select
import fcntl

# These may need some tuning
CHUNK = 4 * 1024
MIN = 256
MAX = 1024
TIMEOUT = CHUNK / float(44100 * 2)

def pipe_buffer(in_fp, out_fp):
    """Reads from something bursty (i.e. peel-encode, which gets its
    data from cdparanoia) on in_fp and writes to something slow (i.e.
    play, which writes to the sound card) on out_fp, ideally at a
    constant rate. The internal buffer is a list of small chunks;
    inbetween each chunk written we check for more on in_fp, which we
    put in nonblocking mode."""

    flags = fcntl.fcntl(in_fp, fcntl.F_GETFL)
    fcntl.fcntl(in_fp, fcntl.F_SETFL, flags|os.O_NONBLOCK)

    buf = []
    ready = False

    while not in_fp.closed:
        rd, wr, ex = select.select([in_fp] if len(buf) < MAX else [],
                                   [out_fp] if ready else [], [], TIMEOUT)
        if in_fp in rd:
            data = in_fp.read(CHUNK)
            if data:
                buf.append(data)
                if len(buf) > MIN:
                    ready = True
            else:
                in_fp.close()
        if out_fp in wr:
            if buf:
                out_fp.write(buf.pop(0))
            else:
                ready = False

    out_fp.write(''.join(buf))

if __name__ == '__main__':
    try:
        pipe_buffer(sys.stdin, os.popen(sys.argv[1], 'w'))
    except KeyboardInterrupt:
        pass
