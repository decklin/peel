#!/usr/bin/python

import os
import sys
import time
import getopt

import lastfm.client
import lastfm.marshaller
from lastfm.config import SaneConfParser

BUF_SMALL = 4096
BUF_LARGE = 1024 * 1024

def quotemeta(s):
    for meta in ('\\', '$', '`', '"', '\n'):
        s = s.replace(meta, '\\' + meta)
    return '"%s"' % s

def popen(argv, mode='r', bufsize=-1):
    enc = sys.getfilesystemencoding()
    command = ' '.join([quotemeta(a) for a in argv]).encode(enc)
    return os.popen(command, mode, bufsize)

class Command:
    def __init__(self, user_opts):
        self.user_opts = user_opts.split()

class CdParanoia(Command):
    def open(self, device, number):
        return popen(['cdparanoia', '-r'] + self.user_opts + ['-d', device,
            '%d' % number, '-'])

class Sox(Command):
    def open(self, device, number):
        return popen(['sox', 'track%02d.cdda.wav' % song['number'], '-t',
            'raw', '-r', '44100', '-c', '2', '-s', '-'])

class OggEnc(Command):
    def open(self, song, path):
        argv = ['oggenc', '-Q', '-r'] + self.user_opts
        try: argv += ['-a', song['artist']]
        except KeyError: pass
        try: argv += ['-t', song['title']]
        except KeyError: pass
        try: argv += ['-l', song['album']]
        except KeyError: pass
        try: argv += ['-N', '%d' % song['number']]
        except KeyError: pass
        try: argv += ['-c', 'musicbrainz_trackid=%s' % song['mbid']]
        except KeyError: pass
        argv += ['-o', '%s.ogg' % path, '-']
        return popen(argv, 'w')

class Lame(Command):
    def open(self, song, path):
        argv = ['lame', '--quiet', '-rx'] + self.user_opts
        try: argv += ['--ta', song['artist']]
        except KeyError: pass
        try: argv += ['--tt', song['title']]
        except KeyError: pass
        try: argv += ['--tl', song['album']]
        except KeyError: pass
        try: argv += ['--tn', '%d' % song['number']] # XXX
        except KeyError: pass
        argv += ['-', '%s.mp3' % path]
        return popen(argv, 'w')

rippers = {'cdparanoia': CdParanoia, 'sox': Sox}
encoders = {'oggenc': OggEnc, 'lame': Lame}

def_path = '%(artist)s/%(album)s/%(number)02d - %(title)s'

if __name__ == '__main__':
    shortopts = 'd:e:qc'
    longopts = ['device=', 'encoder', 'quiet', 'continue']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, 'peel: %s' % e
        sys.exit(1)

    device = '/dev/cdrom'
    quiet = False

    cp = SaneConfParser()
    cp.read([os.path.expanduser('~/.peelrc')])

    rip_cmd = cp.get('commands', 'rip', 'cdparanoia')
    enc_cmd = cp.get('commands', 'encode', 'oggenc')

    rip_opts = cp.get('options', rip_cmd, '')
    enc_opts = cp.get('options', enc_cmd, '')

    path_tmpl = cp.get('output', 'path', def_path)

    for opt, arg in opts:
        if opt in ('--device', '-d'):
            device = arg
        elif opt in ('--quiet', '-q'):
            quiet = True
        elif opt in ('--continue', '-c'):
            rip_cmd = 'sox'
        elif opt in ('--encoder', '-e'):
            enc_cmd = arg

    try:
        ripper = rippers[rip_cmd](rip_opts)
        encoder = encoders[enc_cmd](enc_opts)
    except KeyError, e:
        print >>sys.stderr, 'unknown command: %s' % e.args[0]

    if not quiet:
        cli = lastfm.client.Client('peel')
        cli.open_log()

    for song in lastfm.marshaller.load_documents(sys.stdin):
        print >>sys.stderr, "Track %(number)s: %(title)s..." % song

        safe_song = {}
        for k, v in song.iteritems():
            try:
                safe_song[k] = v.replace('/', '_')
            except AttributeError:
                safe_song[k] = v

        path = path_tmpl % safe_song
        dir = os.path.dirname(path)
        if dir and not os.path.isdir(dir):
            os.makedirs(dir)

        enc = encoder.open(song, path)
        rip = ripper.open(device, song['number'])

        while not rip.closed:
            buf = rip.read(BUF_SMALL)
            if buf:
                enc.write(buf)
                if not quiet:
                    sys.stdout.write(buf)
            else:
                rip.close()

        if not quiet:
            if song['length'] >= 30:
                song['time'] = time.gmtime()
                cli.submit(song)
                cli.log.info('Sent %s to daemon' % lastfm.repr(song))
