#!/usr/bin/python

import os
import sys
import time
import getopt
import yaml
import ConfigParser

class SaneConfParser(ConfigParser.RawConfigParser):
    def get(self, section, option, default):
        try:
            return ConfigParser.RawConfigParser.get(self, section, option)
        except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
            return default

BUF_SMALL = 4096
BUF_LARGE = 1024 * 1024

def quotemeta(s):
    for meta in ('\\', '$', '`', '"'):
        s = s.replace(meta, '\\' + meta)
    return s

def popen(cmd, mode='r', bufsize=-1):
    return os.popen(cmd.encode(sys.getfilesystemencoding()), mode, bufsize)

class Command:
    song_opts = {}
    def __init__(self, user_opts):
        self.user_opts = user_opts
    def args(self, song=None):
        args = [self.user_opts]
        for key, opt in self.song_opts.items():
            try: args.append(opt(song[key]))
            except KeyError: pass
        return ' '.join(args)

class CdParanoia(Command):
    def open(self, device, number):
        cmd = 'cdparanoia %s -r -d "%s" %d -' % (self.args(), device, number)
        return popen(cmd)

class Sox(Command):
    def open(self, device, number):
        cmd = 'sox "track%02d.cdda.wav" %s -t raw -r 44100 -c 2 -e signed-integer -' % (
            number, self.args())
        return popen(cmd)

class Flac(Command):
    song_opts = {
        'artist': lambda s: '-T "ARTIST=%s"' % quotemeta(s),
        'title': lambda s: '-T "TITLE=%s"' % quotemeta(s),
        'album': lambda s: '-T "ALBUM=%s"' % quotemeta(s),
        'number': lambda d: '-T "TRACKNUMBER=%d"' % d,
        'mbid': lambda s: '-T "musicbrainz_trackid=%s"' % s,
        }
    def open(self, song, path):
        cmd = 'flac --silent --endian=little --channels=2 --bps=16 ' + \
            '--sample-rate=44100 --sign=signed %s -o "%s.flac" -' % (
            self.args(song), quotemeta(path))
        return popen(cmd, 'w', BUF_LARGE)

class OggEnc(Command):
    song_opts = {
        'artist': lambda s: '-a "%s"' % quotemeta(s),
        'title': lambda s: '-t "%s"' % quotemeta(s),
        'album': lambda s: '-l "%s"' % quotemeta(s),
        'number': lambda d: '-N "%d"' % d,
        'mbid': lambda s: '-c "musicbrainz_trackid=%s"' % s,
        }
    def open(self, song, path):
        cmd = 'oggenc -Q -r %s -o "%s.ogg" -' % (
            self.args(song), quotemeta(path))
        return popen(cmd, 'w', BUF_LARGE)

class Lame(Command):
    song_opts = {
        'artist': lambda s: '--ta "%s"' % quotemeta(s),
        'title': lambda s: '--tt "%s"' % quotemeta(s),
        'album': lambda s: '--tl "%s"' % quotemeta(s),
        'number': lambda d: '--tn "%d"' % d,
        }
    def open(self, song, path):
        cmd = 'lame --quiet -rx %s - "%s.mp3"' % (
            self.args(song), quotemeta(path))
        return popen(cmd, 'w', BUF_LARGE)

rippers = {'cdparanoia': CdParanoia, 'sox': Sox}
encoders = {'flac': Flac, 'oggenc': OggEnc, 'lame': Lame}

def_path = '%(artist)s/%(album)s/%(number)02d - %(title)s'

if __name__ == '__main__':
    shortopts = 'd:e:qc'
    longopts = ['device=', 'encoder', 'quiet', 'continue']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, 'peel-encode: %s' % e
        sys.exit(1)

    device = '/dev/cdrom'
    quiet = False

    cp = SaneConfParser()
    cp.read([os.path.expanduser('~/.peelrc')])

    rip_cmd = cp.get('commands', 'rip', 'cdparanoia')
    enc_cmd = cp.get('commands', 'encode', 'flac')

    path_tmpl = cp.get('output', 'path', def_path)

    for opt, arg in opts:
        if opt in ('--device', '-d'):
            device = arg
        elif opt in ('--quiet', '-q'):
            quiet = True
        elif opt in ('--continue', '-c'):
            rip_cmd = 'sox'
        elif opt in ('--encoder', '-e'):
            enc_cmd = arg

    rip_opts = cp.get('options', rip_cmd, '')
    enc_opts = cp.get('options', enc_cmd, '')

    try:
        ripper = rippers[rip_cmd](rip_opts)
        encoder = encoders[enc_cmd](enc_opts)
    except KeyError, e:
        print >>sys.stderr, 'unknown command: %s' % e.args[0]

    if not quiet:
        try:
            import lastfm.client
            cli = lastfm.client.Client('peel')
            cli.open_log()
        except:
            print >>sys.stderr, 'lastfm missing?'

    for song in yaml.load_all(sys.stdin):
        print >>sys.stderr, "Track %(number)s: %(title)s..." % song

        safe_song = {}
        for k, v in song.iteritems():
            try:
                safe_song[k] = v.replace('/', '_')
            except AttributeError:
                safe_song[k] = v

        path = path_tmpl % safe_song
        dir = os.path.dirname(path)
        if dir and not os.path.isdir(dir):
            os.makedirs(dir)

        enc = encoder.open(song, path)
        rip = ripper.open(device, song['number'])

        while not rip.closed:
            buf = rip.read(BUF_SMALL)
            if buf:
                enc.write(buf)
                if not quiet:
                    sys.stdout.write(buf)
            else:
                rip.close()

        if not quiet:
            if song['length'] >= 30:
                song['time'] = time.gmtime()
                cli.submit(song)
                cli.log.info('Sent %s to daemon' % lastfm.repr(song))
