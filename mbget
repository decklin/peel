#!/usr/bin/python

import sys
import getopt
import musicbrainz2.webservice
import musicbrainz2.utils
import musicbrainz2.disc
import lastfm.marshaller

def freedb_dump(albumartist, album, discid, tracks):
    print '# fake CD database file generated by mbget'
    print '#'
    print '# Track frame offsets:'

    # Assume standard pregap
    total_len = 2
    for t in tracks:
        print '#       %d' % (total_len * 75)
        total_len += t['length']

    if albumartist and album:
        title = '%s / %s' % (albumartist, album)
    else:
        title = ''

    print '#'
    print '# Disc length: %d seconds' % total_len
    print '#'
    print '# Revision: 0'
    print '# Processed by: MusicBrainz'
    print '# Submitted by: MusicBrainz'
    print 'DISCID=%s' % discid
    print 'DTITLE=%s' % title

    for i, t in enumerate(tracks):
        if albumartist:
            if albumartist == t['artist']:
                title = t['title']
            else:
                title = '%s / %s' % (t['artist'], t['title'])
        else:
            title = ''
        print 'TTITLE%d=%s' % (i, title)

    print 'EXTD='

    for i, t in enumerate(tracks):
        print 'EXTD%d=' % i

    print 'PLAYORDER='
    print '.'

def trackinfo(track, n):
    if track.artist:
        artist_name = track.artist.name
    else:
        artist_name = release.artist.name
    return { 'number': n,
             'artist': artist_name,
             'album': release.title,
             'title': track.title,
             'length': track.duration / 1000,
             'mbid': track.id.split('/')[-1] }

def fakeinfo(track, n):
    return { 'number': n,
             'artist': '',
             'album': '',
             'title': '',
             'length': track[1] / 75 }

if __name__ == '__main__':
    shortopts = 'd:pi:a:fst'
    longopts = ['device=', 'print-discid', 'discid=', 'albumid=', 'freedb',
                'summary', 'template']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, 'getopt: %s' % e
        sys.exit(1)

    device = None
    discid = None
    albumid = None
    print_discid = False
    freedb = False
    summary = False
    template = False

    for opt, arg in opts:
        if opt in ('--device', '-d'):
            device = arg
        elif opt in ('--print-discid', '-p'):
            print_discid = True
        elif opt in ('--discid', '-i'):
            discid = arg
        elif opt in ('--albumid', '-a'):
            albumid = arg
        elif opt in ('--freedb', '-f'):
            freedb = True
        elif opt in ('--summary', '-s'):
            summary = True
        elif opt in ('--template', '-t'):
            template = True

    if not (discid or albumid):
        if device:
            disc = musicbrainz2.disc.readDisc(device) # XXX does this work?
        else:
            disc = musicbrainz2.disc.readDisc()
        discid = disc.id

    if print_discid:
        print discid
        sys.exit(0)

    query = musicbrainz2.webservice.Query()
    try:
        if albumid:
            inc = musicbrainz2.webservice.ReleaseIncludes(artist=True, title=True, releaseEvents=True, labels=True, discs=True, tracks=True, releaseGroup=True)
            release = q.getReleaseById(albumid, inc)
        else:
            filter = musicbrainz2.webservice.ReleaseFilter(discId=discid)
            results = query.getReleases(filter)
            if len(results) > 1:
                print >>sys.stderr, 'Picking first of %d releases' % len(results)
            if len(results) >= 1:
                release = results[0].release
            else:
                release = None
    except musicbrainz2.webservice.WebServiceError, e:
        print 'Error:', e
        sys.exit(1)

    if release:
        tracks = [trackinfo(t, i + 1) for i, t in enumerate(release.tracks)]
    elif template:
        tracks = [fakeinfo(t, i + 1) for i, t in enumerate(disc.tracks)]
    else:
        print >>sys.stderr, 'No release found and --template not specified'
        sys.exit(2)

    if freedb:
        freedb_dump(release.artist.name, release.title, discid, tracks)
    else:
        if args:
            tracks = [tracks[int(n) - 1] for n in args]
        for t in tracks:
            if summary:
                print '%2d. %s' % (t['number'], lastfm.repr(t))
            else:
                print lastfm.marshaller.dump(t)
